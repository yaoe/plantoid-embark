# Plantoid

# Not the worst idea ever, but quite possibly the worst smart contract

# Relies on btcrelay https://github.com/ethereum/btcrelay

extern btcSpecialTx: [getFirst2Outputs:[bytes]:ai]

# Address of the btcrelay contract instance
btcrelay = 0x0000000000000000000000000000000000000000

# A transaction output spendable by plantoid's address, for 1 btc
plantoidScriptPubKey = text("v\xa9\x14\xccjy@+\xfe\r\xc7\xfb\x8b=w/\\#\xea\xb5\xea\xdc\xb6\x88\xac")

# A logging event that is triggered every time plantoid receives more bitcoins
event BitcoinReceived(x:int)

event Notice(x:str)

# Total number of bitcoin (satoshis) received so far
data satoshisReceived

def init():
    self.satoshisReceived = 0

# processTransaction is called by btcrelay contract
def processTransaction(rawTransaction:str, transactionHash):
    if msg.sender != btcrelay: 
        log(type=Notice, text("Only accept processTransaction messages from btcrelay"))
        return(-1)

    if self.storage[transactionHash]: 
        log(type=Notice, text("Plantoid already received this tx"))
        return(-1)
    
    # Check if this transaction has its first output to the plantoid address
    firstTwoOutputs = btcrelay.getFirst2Outputs(rawTransaction)
    if firstTwoOutputs == 0: 
        log(type=Notice, text("Plantoid only likes transactions with 2 outputs"))
        return(-1)
    out1stSatoshis    = firstTwoOutputs[0]
    out1stScriptIndex = firstTwoOutputs[1]
    out2ndScriptIndex = firstTwoOutputs[2]

    # Get the slice of the transaction string corresponding to the scriptPubKey of the first output
    scriptPubKey = slice(rawTransaction, chars=out1stScriptIndex, chars=out2ndScriptIndex)
    if scriptPubKey != plantoidScriptPubKey:
        log(type=Notice, text("This isn't a transaction for plantoid"))
        return(-1)

    # Increment our balance
    self.satoshisReceived += out1stSatoshis

    # Make a log event for the Plantoid SPV client
    log(type=BitcoinReceived, self.satoshisReceived)

